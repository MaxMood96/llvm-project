; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -verify-machineinstrs -mtriple=powerpc64le-unknown-linux-gnu \
; RUN:   -mcpu=pwr8 < %s | FileCheck %s
; RUN: llc -verify-machineinstrs -mtriple=powerpc64-unknown-linux-gnu \
; RUN:   -mcpu=pwr7 < %s | FileCheck %s
; RUN: llc -verify-machineinstrs -mtriple=powerpc-unknown-aix \
; RUN:   -mcpu=pwr7 < %s | FileCheck %s --check-prefix=CHECK-AIX
; RUN: llc -verify-machineinstrs -mtriple=powerpc64-unknown-aix \
; RUN:   -mcpu=pwr7 < %s | FileCheck %s

declare i32 @llvm.ppc.mftbu()
declare i32 @llvm.ppc.mfmsr()

define dso_local zeroext i32 @test_mftbu() {
; CHECK-LABEL: test_mftbu:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mftbu 3
; CHECK-NEXT:    clrldi 3, 3, 32
; CHECK-NEXT:    blr
;
; CHECK-AIX-LABEL: test_mftbu:
; CHECK-AIX:       # %bb.0: # %entry
; CHECK-AIX-NEXT:    mftbu 3
; CHECK-AIX-NEXT:    blr
entry:
  %0 = tail call i32 @llvm.ppc.mftbu()
  ret i32 %0
}

define dso_local i64 @test_mfmsr() {
; CHECK-LABEL: test_mfmsr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mfmsr 3
; CHECK-NEXT:    clrldi 3, 3, 32
; CHECK-NEXT:    blr
;
; CHECK-AIX-LABEL: test_mfmsr:
; CHECK-AIX:       # %bb.0: # %entry
; CHECK-AIX-NEXT:    mfmsr 4
; CHECK-AIX-NEXT:    li 3, 0
; CHECK-AIX-NEXT:    blr
entry:
  %0 = tail call i32 @llvm.ppc.mfmsr()
  %conv = zext i32 %0 to i64
  ret i64 %conv
}
